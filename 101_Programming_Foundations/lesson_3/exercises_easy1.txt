# Exercises: Easy 1

Question 1.

What would the code below print out?

numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers

Answer:
1
2
2
3

---------------------------------------

Question 2.

Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios: 1. what is != and where should you use it? 2. put ! before something, like !user_name 3. put ! after something, like words.uniq! 4. put ? before something 5. put ? after something 6. put !! before something, like !!user_name

Answer:
!= means "not equals"
? : is the ternary operator for if...else
!!<something> is used to turn an object into boolean
  equivalent.
!<something> is used to turn any object into opposite of 
  their boolean equivalent.

------------------------------------------

Question 3.

Replace the word "important" with "urgent" in this string:

advice = "Few things in life are as important as house training your pet dinosaur." 

Answer:
advice.gsub!("important", "urgent")

 ----------------------------------------------
Question 4.

The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ:

numbers = [1, 2, 3, 4, 5]

What does the follow method calls do (assume we reset numbers to the original array between method calls)?

numbers.delete_at(1)
numbers.delete(1)

Answer:
delete_at(index) deletes element at specified index
delete(something) deletes all instances of what you pass into it from the array.

----------------------------------------------------------

Question 5.

Programmatically determine if 42 lies between 10 and 100.

hint: Use Ruby's range object in your solution.

Answer:
(10..100).to_a.include?(42)

----------------------------------------------------------

Question 6.

Starting with the string:

famous_words = "seven years ago..."

show two different ways to put the expected "Four score and " in front of it.

Answer:
1.
famous_words.prepend("Four score and ")
2.
famous_words = "Four score and " + famous_words

----------------------------------------------------------

Question 7.

Fun with gsub:

### Code

def add_eight(number)
  number + 8
end

number = 2

how_deep = "number"
5.times { how_deep.gsub!("number", "add_eight(number)") }

p how_deep

### End

This gives us a string that looks like a "recursive" method call:

add_eight(add_eight(add_eight(add_eight(add_eight(number)))))

If we take advantage of Ruby's Kernel#eval method to have it execute this string as if it were a "recursive" method call

eval(how_deep)

what will be the result?

Answer:
42

---------------------------------------------------------

Question 8.

If we build an array like this:

flintstones = ["Fred", "Wilma"]
flintstones << ["Barney", "Betty"]
flintstones << ["BamBam", "Pebbles"]
We will end up with this "nested" array:

["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]

Make this into an un-nested array.

Answer:
flintstones = flatten!

---------------------------------------------------------

Question 9.

Given the hash below

flintstones = { "Fred" => 0, "Wilma" => 1, "Barney" => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }

Turn this into an array containing only two elements: Barney's name and Barney's number

Answer:
flintstones.rassoc(2)

---------------------------------------------------------

Question 10.

Given the array below

flintstones = ["Fred", "Barney", "Wilma", "Betty", "Pebbles", "BamBam"]

Turn this array into a hash where the names are the keys and the values are the positions in the array.

Answer:
Hash[flintstones.map.with_index{|*x|x}]